---
title: 'Python中的迭代器（iterator）'
---

循环可以说是任何一门程序语言中都必备的基本功能，进一步的，很多当代语言提供了迭代器（iterator）的概念，用于在序列（Sequences）类型、或者可以转换为序列的类型上进行循环。比如下面的代码：

    foo = [3, 4, 5, 6]
    for i in foo:
        print i

在上面代码中，`foo`是一个list对象，我们使用了最常见的` for in `语句来遍历它的成员。除此之外，还可以使用迭代器（[Iterators]）来进行遍历。首先用内置函数[iter]得到foo的迭代器：

    >>> it = iter(foo)
    
通过dir函数查看迭代器it的属性：

    >>> dir(it)
    ['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__'
    , '__init__', '__iter__', '__length_hint__', '__new__', '__reduce__', '__reduce_ex__
    ', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'next']

我们关注其中的两个方法：

* `__iter__`：这个方法返回一个迭代器，对于已经是迭代器的对象来说，它返回自身。

* `next`：返回制定序列的下一个元素，如果next第一次被调用，返回的是序列中的第一个元素。

能够提供上述两个方法的对象，我们就可以称之为迭代器。

那么我们当然可以定义自己的迭代器类型：

    class MyIntIterator(object):
        def __init__(self, num):
            self.number = num

        def __iter__(self):
            return self

        def next(self):
            self.number += 2
            if self.number > 9:
                raise StopIteration
            return self.number

这里定义了一个简单的迭代器类型，`__init__`方法用于接收初始化参数，保存在对象的`number`属性中。`__iter__`方法直接返回自身，`next`把当前的`number`属性加上2并返回，当`number`大于9时抛出`StopIteration`异常。下面来测试一下这个类：

    >>> foo = MyIntIterator(2)
    >>> foo.next()
    4
    >>> foo.next()
    6
    >>> foo.next()
    8
    >>> foo.next()
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "t1.py", line 58, in next
        raise StopIteration
    StopIteration

第一次运行`foo.next()`返回4，第二次返回6，第三次返回8，运行到第四次时`number`已经等于10，大于9符合StopIteration的条件，于是抛出异常。

我们同样也可以使用`for in`语句来进行遍历：

    >>> bar = MyIntIterator(2)
    >>> for i in bar:
    ...     print i
    ...
    4
    6
    8
    >>>

同样返回了4、6、8三个数字。不同的是，程序没有抛出StopIteration异常，而是运行到8之后就停止了遍历。

我们可以认为，`for in`语句是可用迭代器的方式等价转换的，比如本文一开始的代码：

    foo = [3, 4, 5, 6]
    for i in foo:
        print i

可以改写成如下的等价语句：

    foo = [3, 4, 5, 6]
    it = iter(foo)
    while True:
        try:
            i = it.next()
            print i
        except StopIteration:
            break

这样的写法比直接使用for in语句要麻烦的多，但是却更加接近for in语句的本质含义，正如python文档里所说：

>
Behind the scenes, the for statement calls iter() on the container object. The function returns an iterator object that defines the method next() which accesses elements in the container one at a time. When there are no more elements, next() raises a StopIteration exception which tells the for loop to terminate. 

for语句正是对循环对象（容器）调用了iter()函数，得到一个迭代器，每次循环都调用迭代器的next()方法得到下一个元素，如果没有更多元素，这抛出StopIteration异常来结束循环。这真是我们上面的代码所做的。

上面讨论了迭代器对象，它必须提供`__iter__`和`next`两个方法，如果一个对象只有`__iter__`方法，也是可以对它使用`iter()`内置函数的，但是该`__iter__`方法必须返回一个迭代器对象，否则会抛出`TypeError`异常：

    class only_iter(object):
        def __iter__(self):
            return 1

来测试一下：

    >>> foo = only_iter()
    >>> iter(foo)
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: iter() returned non-iterator of type 'int'

这里抛出了`TypeError`异常。但是我们从中可以看出，内置函数`iter()`其实就是对指定对象调用`__iter__`方法，然后检查该方法的返回值，如果返回值不是iterator对象，则抛出`TypeError`异常，如果是则返回该返回值。

这里我们又忽发奇想，如果一个对象只提供next方法，它是否是一个迭代器呢？我们来写如下的代码：

    class next_only(object):
        def next(self):
            return 1

    class only_iter(object):
        def __iter__(self):
            return next_only()

定义一个`next_only`，只提供next方法，然后定义`only_iter`类型，提供`__iter__`方法。下面来进行测试：

    >>> foo = only_iter()
    >>> bar = iter(foo)
    >>> bar
    <t1.next_only object at 0x10f194250>

可以看到，在这样的定义下，对only_iter类型的对象调用内置函数`iter()`，不会再抛出`TypeError`异常了，而是返回了一个`next_only`类型的对象bar。这个对象是否就是迭代器类型呢？

    >>> for i in bar:
    ...     print i
    ...
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: 'next_only' object is not iterable

可以看到，对bar执行 for in语句，又跑出了TypeError异常。看来仅仅提供next方法，虽然可以过iter这一关，但仍然不能算是迭代器类型。只有像下面这样完整的定义了`__iter__`和`next`方法的类型才算是迭代器类型：

    class iter_only(object):
        def __iter__(self):
            return barcls(9)

    class iterator_cls(object):
        def __init__(self, num):
            self.num = num
        def __iter__(self):
            return self
        def next(self):
            self.num += 1
            if self.num > 15:
                raise StopIteration
            return self.num

测试对mnonitercls的实例调用iter：

    >>> foo = iter_only()
    >>> it = iter(foo)
    >>> for i in it:
    ...     print i
    ...
    10
    11
    12
    13
    14
    15
    >>>

可以得到预期的结果。

值得一提的是，Python提供了标准库itertools，内置了很多实用的函数用于生成数字和字符相关的各种迭代器，详细可参看[itertools — Functions creating iterators for efficient looping]。

Python语言其实内置了很多iterator，比如`file`对象：

    >>> wwwlog=open('access-log')
    >>> type(wwwlog)
    <type 'file'>
    >>> dir(wwwlog)
    ['__class__', '__delattr__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'closed', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'mode', 'name', 'newlines', 'next', 'read', 'readinto', 'readline', 'readlines', 'seek', 'softspace', 'tell', 'truncate', 'write', 'writelines', 'xreadlines']

对一个file对象调用内置函数dir，发现它也有`__iter__`和`next`方法，每次调用next相当于调用一次`readline`：

    >>> wwwlog.next()
    '140.180.132.213 - - [24/Feb/2008:00:08:59 -0600] "GET /ply/ply.html HTTP/1.1" 200 97238\n'
    >>> wwwlog.next()
    '140.180.132.213 - - [24/Feb/2008:00:08:59 -0600] "GET /favicon.ico HTTP/1.1" 404 133\n'

花了这么多篇幅来讨论iterator，并不仅仅是为了探讨for循环语句的背后原理，更重要的是iterator是python里另外一个重要概念generator（生成器）的基础，关于generator，常见我的[这篇博客](20170502.1.html)。

参考：

[Iterators]

[Iterator Types]

[The for statement]

[itertools — Functions creating iterators for efficient looping]

[PEP 0234 -- Iterators]

-----

[iter]: https://docs.python.org/2.7/library/functions.html#iter

[Iterators]: https://docs.python.org/2.7/tutorial/classes.html#iterators

[Iterator Types]: https://docs.python.org/2.7/library/stdtypes.html?highlight=iterator#iterator-types

[The for statement]: https://docs.python.org/2.7/reference/compound_stmts.html#the-for-statement

[itertools — Functions creating iterators for efficient looping]: https://docs.python.org/2.7/library/itertools.html#module-itertools


[PEP 0234 -- Iterators]: https://www.python.org/dev/peps/pep-0234/