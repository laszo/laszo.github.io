---
title: 'Tornado的Web框架简介'
---

Tornado共有四个主要部分，分别是：

* Web框架：与Flask、Django等类似
* HTTP协议的实现：提供HTTP服务器和异步的HTTP客户端
* 高效能的异步网络IO库
* 协程库：提供组件，允许以`更直接`的方式进行异步编程[^note_callback]

Tornado与其他Web框架相比，最大的特点就是提供了后面三部分，基于`tornado.web`的应用部署在自己的服务器上能够实现最高的效能、也能够支持其他几个组件提供的特性，比如`await`关键字等。
仔细研究其源码会发现，上述几个部分仅仅是并非并列的关系，有一些组件是建立在另一些组件之上的，可以看做是基层组件的具体应用。

<span id='demo'>官网上的demo</span>，下文会用到这段代码：

    :::python
    import tornado.ioloop
    import tornado.web

    class MainHandler(tornado.web.RequestHandler):
        def get(self):
            self.write("Hello, world")

    def make_app():
        return tornado.web.Application([
            (r"/", MainHandler),
        ])

    if __name__ == "__main__":
        app = make_app()
        app.listen(8888)
        tornado.ioloop.IOLoop.current().start()

<h4 id='web_f'>Web框架</h4>

但本文暂且只关注Web框架的部分，这一部分在众多的Python的Web框架里来说并不算复杂，有如下组件：

* tornado.web：Web框架的主要部分，提供RequestHandler和Application类
* tornado.template：模板系统
* tornado.routing：路由系统
* tornado.escape：转义和字符处理
* tornado.locale：国际化支持
* tornado.websocket：WebSocket的实现

本文主要关注前三部分，其余的部分，转义、国际化、WebSocket等不能说不重要，但是对于一个Web框架的实现来说并非主干流程。

<h4 id='tor_web'>tornado.web</h4>

主要有Application类和RequestHandler类。

Application类是Web应用的`骨架`，可以认为就是MVC中的`'C'`，主要的工作：

* 持有路由表，包含URL的配置和对应的Handler
* 包含所有全局配置项，包括路由表
* 接收HTTP请求，寻找匹配的URL并调用相应的Handler

RequestHandler是Web系统的`器官`，即主要的功能实现都是它来完成，由RequestHandler实现基本功能，
下列它的子类实现其他功能：

* ErrorHandler：错误处理，向客户端发送错误响应
* RedirectHandler：用于转发请求
* StaticFileHandler：提供静态文件服务
* FallbackHandler：在承载其他非Tornado的Web应用时使用，本文不会涉及

刚才的[demo](#demo)里可以看到，我们写Web应用，主要就是写一系列RequestHandler的子类，在子类里实现自己的业务逻辑。我们都知道，HTTP协议规定了`GET`、`POST`等八种方法，我们在子类里必须至少提供一个同名方法，用于接收对应方式的客户端请求。

下面按照官网文档的顺序列举RequestHandler的一些成员或方法，未包含全部。

一、输入

对于RequestHandler来说，所谓的输入就是客户端发来的HTTP请求，可以以下列方法获取请求的指定参数：

* get_argument：获取指定的参数值
* get_query_argument：从query中获取指定的参数值
* get_body_argument：从body中获取指定的参数值
* request：这是一个[tornado.httputil.HTTPServerRequest]对象，封装了客户端的HTTP请求应有的全部数据。包括method、uri、path、headers、body等成员，如果想要获取指定参数，可以以`self.request.body`等方式访问。

二，输出

对于RequestHandler来说，所谓的输出就是要返回的HTTP响应，可以以下列方法设置指定的响应参数[^note_re_resp]，返回的即可以直接是字符串或html代码、也可以是调用模板渲染之后进行返回、也可以是转发到其他地址：

* set_status：返回HTTP状态
* set_header：设置首部
* add_header：添加一个首部
* write：返回HTTP的body
* render：调用模板，传递参数，渲染模板，并返回渲染的结果
* redirect：转发
* send_error：返回HTTP错误状态

三、Cookies

Cookies是Web应用必须支持的功能，下列方法提供了Cookies的操作：

* get_cookie：获取指定Cookie值
* set_sookie：设置指定Cookie值
* clear_cookie：清除指定Cookie值
* set_secure_cookie：以timestamps加密指定Cookie值，必须在Application里设置cookie_secret
* get_secure_cookie：获取指定的加密Cookie

<h4 id='tor_template'>tornado.template</h4>

tornado.template主要用于模板的渲染，其模板的主要语法与Jinja、Django Tempaltes等区别不大，
不再详述。

主要值得一提的是：

* 模板对`\{% %\}`内的表达式不进行任何限制，会直接翻译成Python代码，也就是说可以向模板传递自己定义的函数，然后在模板里调用这个函数。

* 不得使用以`_tt_`开头的变量

<h4 id='tor_rou'>tornado.routing</h4>

向其他的Web框架一样，Tornado的路由系统主要做如下工作：

* 包含一个路由列表，用于客户端URL的匹配
* 找到匹配的正则表达式即调用对应的RequestHanlder

从使用的角度来说，需要关心的类主要是URLSpec，Tornado的路由表包含一系列URLSpec对象。每个对象包含一个正则表达式和一个RequestHandler，Tornado的路由表包含一系列这样的URLSpec对象


[^note_callback]: 一堆callback就是屎
[^note_re_resp]: 只是设置返回数据，具体的向客户端传输的动作由Application执行

[tornado.httputil.HTTPServerRequest]: http://www.tornadoweb.org/en/stable/httputil.html#tornado.httputil.HTTPServerRequest

