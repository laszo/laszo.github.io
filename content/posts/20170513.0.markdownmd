---
title: '用Python从零开始一步一步构建Web Server，第一部分：基础的功能实现和逻辑分离'
---

### 最简代码

我们来研究如何构建Web Server，从最基本的socket开始构建，
不使用`SocketServer`、`wsgiref`等框架。
最简单的代码：

    :::python
    import socket

    MAX_READS = 65537
    G_response = 'HTTP/1.0 200 OK'
    G_content = """

    <head>
    <title>Hello, world!</title>
    </head>
    <body>
    Hello, world!
    </body>
    """
    def run_server(address):
        s = socket.socket()
        s.bind(address)
        s.listen(5)
        while True:
            c, a = s.accept()
            print 'Connected from ', a
            c.recv(MAX_READS)
            c.send(G_response + G_content)
            c.close()
        s.close()

    def test():
        address = ('', 8000)
        run_server(address)

    if __name__ == '__main__':
        test()

Web服务器，区别于socket服务器的地方是它能够发送HTTP响应，HTTP响应的必要条件是包含响应的首行，即上面的`G_response`变量的内容。构建一个能能够让浏览器正常访问的Web服务器，上述代码已经是最简单的逻辑。`G_content`字符串第一行的空行是必不可少的。因为HTTP协议规定响应的第一行与后面必须有空行分隔。

### 逻辑分离

复杂的系统没有把所有逻辑写在一个函数里的，我们这里把Web服务器的任务逻辑分为如下几个部分：

1. 初始化服务器
2. 监听请求
3. 获取请求数据
4. 处理请求
5. 返回响应

我们这里把前三步保留在`run_server`里，后两步提取出来作为`handle`函数：

    :::python
    def run_server(address):
        s = socket.socket()
        s.bind(address)
        s.listen(5)
        while True:
            c, a = s.accept()
            print 'Connected from ', a
            handle(c)
        s.close()

    def handle(request):
        request.recv(MAX_READS)
        request.send(G_response + G_content)
        request.close()

### 并发与多路复用

作为一个Web服务器，不能仅仅只支持单个客户端请求，而要支持多个客户端的同时请求，这是最基本的要求。但是本文的重点在于理清服务器的实现逻辑，为后续的开发打下基础，暂且仅对服务器作如下最简单的处理。

加入多线程：

    :::python
    import threading

    def run_server(address):
        s = socket.socket()
        s.bind(address)
        s.listen(5)
        while True:
            c, a = s.accept()
            print 'Connected from ', a
            t = threading.Thread(target=handle, args=(c,))
            t.start()
        s.close()

使用select：

    :::python
    import select

    def run_server(address):
        s = socket.socket()
        s.bind(address)
        s.listen(5)
        while True:
            rl, wl, el = select.select([s], [], [])
            for r in rl:
                c, a = r.accept()
                print 'Connected from ', a
                t = threading.Thread(target=handle, args=(c,))
                t.start()
        s.close()

### handle的修改

作为一个web服务器，想要真正可用，就不能只满足于发送静态的HTML，而应该根据客户端的请求进行灵活处理。来看之前handle函数的代码：

    :::python
    def handle(request):
        request.recv(MAX_READS)
        request.send(G_response + G_content)
        request.close()

可以说，这时候Web服务器只能进行机械应答，不管客户端发送什么请求，统统机械的返回一个包含`hello, world`的网页，这显然是不够的。

要进行灵活的处理， 就需要解析客户端请求的具体内容参数，根据内容参数进行不同的处理。简单起见，我们先获取URL中的参数，这对于GET请求来说已经足够，当然对于POST请求来说，请求的参数包含在data部分，后续再添加。看下面的`parser`函数：

    :::python
    def parser(request):
        lines = request.split('\r\n')
        first = lines[0]
        words = first.split()
        print words
        if len(words) > 1:
            return words[1]

parser方法用于解析请求，返回请求地址。

还需要对handle函数作如下修改：

    :::python
    from app import application

    def handle(request):
        raw = request.recv(MAX_READS)
        url = parser(raw)
        result = application(url)
        request.send(G_response + result)
        request.close()

handle方法接收客户端的原始请求以后，调用parser获取请求中的url。将获得的url传入application，得到结果`result`变量，并将结果随response状态行一起发送到客户端。

### application的概念

这里的application，我们可以把它看做一个函数，输入请求地址，返回响应数据。来看看它的代码：

    :::python
    # app.py

    urls = [
        ('/', hello1),
        ('/hello1', hello1),
        ('/hello2', hello2),
    ]

    import re
    def application(url):
        for u, f in urls:
            if re.match(u, url):
                return f()

application根据接收到的url，调用对应的处理函数。这里需要预先定义一个url与处理函数的对应关系，保存在`urls`变量中。下面来看具体的处理函数：

    :::python
    # app.py

    G_content = """

    <head>
    <title>Hello, world!</title>
    </head>
    <body>
    %s, world!
    </body>
    """

    def hello1():
        return G_content % 'hello1'

    def hello2():
        return G_content % 'hello2'

虽然仍然非常之简单，但上述代码结合在一起，已经能够根据客户端的不同请求返回不同的内容。要构建任何类型的网站，实现任何功能，只需要增加对应的处理函数，并增加相应的url到`urls`列表中，包含了无限的可能性，这已经可以称为一个动态的网站。

### 总结

现实中的任何网站所涉及的系统都不可能像本文中的代码这么简单。但是现实中的生产系统、与本文所构建的小小系统有如下几点相似之处：

一，在基本核心功能上是一样的。接收客户端浏览器的HTTP请求，动态返回HTTP响应，Web程序员据此可以构建出他想要的网站。

二，在核心逻辑上是一致的。打个比方，如果要用简单的一段话向别人介绍Web系统的原理，介绍生产系统、或是介绍本文的小小系统，完全可以使用同一段话。

三，在架构设计上是一致的。软件的组件化、模块化是复杂系统的基本要求。现实中的系统，分为如下几部分：

1. 服务器，用于监听客户端请求，把请求发送到应用端处理。常见的服务器有`Apache`、`Nginx`、`Caddy`等。对应于本文的`run_server`函数。
2. 应用端，根据请求进行处理，返回响应。随着Web系统的发展，人们发现，应用端中有一部分代码频繁变化，另一部分则相对稳定，于是人们把这两部分代码分为如下两项：
    1. 框架，相对稳定的部分，不同的网站也能通用这部分代码。对应于本文的`application`函数。
    2. 应用，这部分代码根据不同网站的业务逻辑而完全不同。作为一个后端程序员，主要的工作就是写这一部分代码。对应于本文中的`hello1`和`hello2`等函数。

#### 不足之处

本文所有的代码都是不足的，与其说是不足之处，不如说是待办事项：

1. 只能获取客户端请求中的URL部分，不能获取POST的参数
2. 只能把URL整体作为一个参数来处理，不能获取URL中的具体参数，并传递到处理函数中
3. 对于可能会出现异常的地方，没有进行异常处理
4. 只进行了最简单的并发处理，对于性能没有进行考虑，更不用说是优化了。


关于这些后续工作，敬请关注我的Github项目 [PyWebServer]，这个项目的目标是构建一套生产级别的Web服务栈。

[PyWebServer]: https://github.com/laszo/PyWebServer
