---
title: 'Django 中的 application 的概念、配置、文件结构'
---

在 Django 的语境中，`project` 指的是整个 Web 项目/网站/系统，
`application` 指的是这个项目中的模块组件，负责实现项目的一部分功能。
比如一个电子商务系统，如果用 Django 来开发，它的账户体系、支付系统、商品体系等模块的代码，
就可以分别组织成不同的 application。所有的 application 加在一起，再加上项目的全局配置，
组成了 project。虽然叫 application，它其实是一个标准的 Python package。

一般来说一个 Django 项目的组成结构如下：

    .
    └── ProjectName
        ├── manage.py
        ├── ProjectName
        │   ├── settings.py
        │   ├── urls.py
        │   └── wsgi.py
        ├── application1
        │   ├── ...
        ├── application2
        │   ├── ...
        └── application3
        │   ├── ...
        │────── ...

生成一个 application 非常简单，需要用到 `startapp` 命令，在项目目录下执行：

    ./manage.py startapp myapp

就在当前项目下添加了一个名为 myapp 的 application。但是这时候在整个项目范围内，
还无法使用这个 application，还需要进行所谓的激活或注册。

刚才的命令，生成的文件结构如下：

    ├── myapp
        │   ├── __init__.py
        │   ├── admin.py
        │   ├── apps.py
        │   ├── migrations
        │   ├── models.py
        │   ├── tests.py
        │   └── views.py

其中，`apps.py` 文件中定义了一个名为 `MyappConfig` 的类，继承自 `django.apps.AppConfig`:

    from django.apps import AppConfig

    class MyappConfig(AppConfig):
        name = 'myapp'

这个类是 `startapp` 命令自动生成的。要进行 myapp 的激活，需要修改 `INSTALLED_APPS` 变量。
在文件 `ProjectName\settings.py` 中，可以看到这个变量的配置代码：

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

这是 Django 预定义的内置 application，我们把刚才生成的 `MyappConfig` 添加到这个列表中：

    INSTALLED_APPS = [
        'myapp.apps.MyappConfig', # 添加自己的 application
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

让我们来使用 django-admin 的 `shell` 命令来查看项目的配置：

    ./manage.py shell

这时候就进入了 Python 交互环境，能够看到命令提示符 `>>>` ，
使用 `django.apps.apps.get_app_configs` 方法查看已注册的 application ：

    >>> from django.apps import apps
    >>> apps.get_app_configs()
    [<MyappConfig: myapp>, <AdminConfig: admin>, <AuthConfig: auth>, <ContentTypesConfig:
    contenttypes>, <SessionsConfig: sessions>, <MessagesConfig: messages>, <StaticFilesCon
    fig: staticfiles>]

可以看到，`MyappConfig: myapp` 就是我们刚才添加的 application。

在 `INSTALLED_APPS` 中，如果我们添加的不是 `'myapp.apps.MyappConfig'` ，
而直接是 `'myapp'`，也是可以的:

    INSTALLED_APPS = [
        'myapp', # 直接使用 application 的名字
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

只是这时候再去看 `django.apps.apps.get_app_configs` 方法， 就变成了：

    >>> apps.get_app_configs()
    [<AppConfig: myapp>, <AdminConfig: admin>, <AuthConfig: auth>, <ContentTypesConfig: co
    ntenttypes>, <SessionsConfig: sessions>, <MessagesConfig: messages>, <StaticFilesConfi
    g: staticfiles>]

我们自己添加的 application 从 `MyappConfig: myapp` 变成了 `AppConfig: myapp`。

也就是说，`INSTALLED_APPS` 这个列表变量，可以接受 `AppConfig` 类、也可以接受它的子类。
如果我们再去添加一个 application：

    ./manage.py startapp myapp1

并注册：

    INSTALLED_APPS = [
        'myapp1.apps.Myapp1Config',
        'myapp',
        'django.contrib.admin',
        ...
    ]

再来看 `apps.get_app_configs` ：

    >>> from django.apps import apps
    >>> apps.get_app_configs()
    [<Myapp1Config: myapp1>, <AppConfig: myapp>, <AdminConfig: admin>, <AuthConfig: auth>,
    <ContentTypesConfig: contenttypes>, <SessionsConfig: sessions>, <MessagesConfig: mess
    ages>, <StaticFilesConfig: staticfiles>]

得到了想要的效果。

下面我们来看预定义的 application 文件结构的其余部分：

    ├── myapp
        │   ├── __init__.py
        │   ├── admin.py
        │   ├── apps.py
        │   ├── migrations
        │   ├── models.py
        │   ├── tests.py
        │   └── views.py

其中， `migrations`是一个文件夹，用于数据模型与数据库结构的同步，
`models.py`用于定义数据模型，前面我们在 [Django Model 层工作流总结]中已经做了说明。
`apps.py` 文件已经在上面刚刚解释过。
现在还剩下三个文件：`admin.py`、`tests.py`、`views.py`。


需要说明的是， application 进行这样的文件结构设计，是为了进行代码逻辑的分离，
体现单一职责等设计原则，这是一种行之有效的行业实践，而并非是必须这么做才能运行 Django 项目。
比如，我们在前面[从最简Django项目深入分析Django框架的启动过程]中定义的项目，
就没有使用这样的文件结构，甚至没有使用 application，也是能够运行的。

但是如果你做实际的项目时把所有的代码都放到同一个文件里，代码很快就会像一团乱麻一样，
根本就找不到，你也会因此痛苦不堪。
做任何实际的项目，还是应该像推荐的那样，把不同的代码逻辑放在不同的文件、目录、模块中去，
并进行良好的命名，随着项目的发展，结构组织良好的代码会越来越体现出它的优点来。

[Django Model 层工作流总结]: 20170317.0.html
[从最简Django项目深入分析Django框架的启动过程]: 20170302.1.html