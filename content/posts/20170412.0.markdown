---
title: 'Django Template 系统及其与Jinja2 的几点区别'
---

动态网站与静态网站的本质区别就是HTML代码的生成过程。静态网站预先编辑好HTML文件放在服务器上，
客户端浏览器发出请求时，Web服务器读取HTML文件的内容，以HTTP协议规定的格式返回给客户端。
动态网站在收到客户端的请求时，会根据请求的内容进行某种计算和数据库的查询，把查询和计算得到的数据
拼装成HTML代码，以HTTP协议规定的格式返回给客户端。在Django里，
把数据拼装成HTML代码的过程是由模板系统（Template System）来完成的。
简单来说，整个模板系统需要如下三个部分协调工作：

#### 1.动态数据，
比如从数据库中查询得到：
    
    user.name = 'Jack';
    user.age = 21
    

#### 2.模板文件，
这是一个混合了HTML代码和模板标记的代码文件：

    <html>
        <head>
        <title>
            Hello, {{ user.name }}
        </title>
        </head>
        <body>
            Hi, {{ user.name }}, your age is {{ user.age }}.
        </body>
    </html>

在上面文件中，除了普通的HTML标记之外，`{{ user.name }}`和`{{ user.age }}`都是模板的标记，
模板系统的引擎根据这些模板的标记进行相应的处理。

#### 3.模板引擎
模板引擎读取模板文件和动态数据，根据模板中的标记把动态数据替换其中，形成最终的纯粹的HTML代码。
这个过程一般称为渲染（render）。
在上面的例子里，模板文件最终渲染成为如下HTML代码：

    <html>
        <head>
        <title>
            Hello, Jack
        </title>
        </head>
        <body>
            Hi, Jack, your age is 21.
        </body>
    </html>

## 配置 Django Template

当我们使用 `django-admin` 的 `startproject` 命令新建一个项目时，
项目文件下已经自动预设了模板的相关配置，在`settings.py`文件中有一个`TEMPLATES`变量：

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplagte',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

可以看到TEMPLATES是一个列表，每一项元素都是一个字典，指明了其中一个模板的配置。字典包含如下项：

* BACKEND：指定了要使用的模板引擎。Django默认使用`django.template.backends.django.DjangoTemplagte`。

* DIRS：指明模板文件的存放路径，是一个文件目录的列表。引擎从这些目录中顺序查找模板文件。

* APP_DIRS：这是一个布尔值。指明是否从当前项目的`installed applications`里查找模板。

* OPTIONS：指定的额外选项。不同的引擎使用不同的额外参数。比如Django自带的引擎可以指定`context_processors`参数。具体有哪些参数可参看[DjangoTemplates]。

### 模板文件的存放目录

模板文件的名称，是一个普通的相对路径的文件名，如`'index.html'`或`'myapp/index.html'`。

如果指定了`APP_DIRS`为`True`，Django会在application的目录下查找一个`templates`目录，
从里面查找模板文件。
比如说如果我们有一个项目名为`myproject`，下面有一个application名为`myapp`，
templates的路径应该是：`~/myproject/myapp/tempaltes/`。

按照惯例，还应该在templates目录下再建一个子目录，以application的名字命名，
即`~/myproject/myapp/tempaltes/myapp/`，比如一个`'myapp/index.html'`模板文件，
它的完整路径应该是`~/myproject/myapp/tempaltes/myapp/index.html`[^note1]。

如果`DIRS`和`APP_DIRS`同时生效，并且相关的目录下有相同的相对路径的模板文件，
引擎会以`DIRS`为优先匹配。比如指定`'DIRS': [/var/www/template/]`，
在查找`myapp/index.html`时，既有`/var/www/template/myapp/index.html`，
也有`~/myproject/myapp/tempaltes/myapp/index.html`，
会先匹配到`/var/www/template/myapp/index.html`。


## 使用 Django Template

对于模板的使用主要在 view 的代码里操作：

    from django.http import HttpResponse
    from django.template import loader

    def index(request):
        context = {
            'message': 'hello, world!'
        }
        template = loader.get_template('base.html')
        return HttpResponse(template.render(context, request))

上述代码涉及到如下API：

* django.template.loader.get_template()：
    读取模板文件，生成并返回一个`Template`的实例对象

* render：
    `Template`的实例对象的方法，读取context和request参数。
    context包含了需要传入给模板的动态数据，request即HttpRequest类的对象。
    render函数生成了 `django.utils.safestring.SafeText`对象，可以认为就是字符串。

* HttpResponse()：
    HttpResponse把字符串包装成符合HTTP协议的Response，由服务器返回给客户端。

## Django Template的语法

总得来说Django Template的语法元素就是一系列被 `{{ }}` 和 `{% %}` 包起来的代码块。有如下几类元素：

* 变量：比如上面例子中的 `{{ user.name }}`，一般来说就是普通的Python变量。在render阶段，模板引擎会使用变量的实际值来替换模板中的变量名。

* 过滤器（Filters）：过滤器可以对变量进行某种操作和改进，比如转换大小写等，详细可参看[Built-in filter reference]。

* 标记（Tags）：使用`{% %}`包裹的代码段，可用于流程控制、循环、函数调用、模板继承等操作。相当于一门小型的语言，详细可参看[Built-in tag reference]。

* 注释（Comments）：用于在模板里添加注释，使用`{# #}`包裹。



[DjangoTemplates]: https://docs.djangoproject.com/en/1.10/topics/templates/#django.template.backends.django.DjangoTemplates

[Built-in tag reference]:https://docs.djangoproject.com/en/1.10/ref/templates/builtins/#ref-templates-builtins-tags

[Built-in filter reference]:https://docs.djangoproject.com/en/1.10/ref/templates/builtins/#ref-templates-builtins-filters

[^note1]:当然这一条并非是必须的，
如果你把模板文件存放在`~/myproject/myapp/tempaltes/index.html`，
然后以`'index.html'`来查找模板文件也是可以的。但是我们最好还是遵循这种惯例，试想如果是一个大型项目，
下面有非常多的application，有大量的模板文件诸如`user.html`、`display.html`这样的名字，
很容易搞不清哪个是哪个。如果前面加上application的名字，形成类似命名空间的效果，就清晰的多了。

