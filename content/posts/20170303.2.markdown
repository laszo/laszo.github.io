---
title: "添加新的 Django management 命令"
---

[前文](20170302.1.html)说到，当我们运行

    python hello.py runserver

时，这里的`runserver`其实是一个Django内置的命令，用于启动Django自带的HTTP服务器。

查看完整的命令可以运行：

    python hello.py help

默认会得到：

    Type 'hello.py help <subcommand>' for help on a specific subcommand.

    Available subcommands:

    [django]
        check
        compilemessages
        createcachetable
        dbshell
        diffsettings
        dumpdata
        flush
        inspectdb
        loaddata
        makemessages
        makemigrations
        migrate
        runserver
        sendtestemail
        shell
        showmigrations
        sqlflush
        sqlmigrate
        sqlsequencereset
        squashmigrations
        startapp
        startproject
        test
        testserver

这是Django框架提供的一些列命令，具体含义可以查看[django.core.management]。

[前文](./20170302.1.html)分析过，当输入`runserver`命令时，ManagementUtility对象会从
“/Library/Python/2.7/site-packages/django/core/management/commands/”
文件夹下面查找所有的py文件。把文件名当做命令的名字来对待。

这很容易就联想到，如果我们在那个文件夹下面添加一个自己的py文件，按照格式在文件里
定义一个继承自BaseCommand的Comman对象，是不是就相当于添加了一条命令呢？

一试便知。把如下的代码保存为myhello.py文件，保存在
“/Library/Python/2.7/site-packages/django/core/management/commands/”
目录下。

    from django.core.management.base import BaseCommand

    class Command(BaseCommand):
        def handle(self, *args, **options):
            print 'hello, my command'

然后我们运行

    python hello.py myhello

果然得到了想要的结果：

    bash-3.2$ python hello.py myhello
    hello, my command

需要指出的是，由于我们直接把新命令添加在了Django框架的源代码目录中，这样的添加是全局的，
也就是说，当你使用`django-admin startproject`建立新的项目时，
我们所添加的`myhello`仍然是可以使用的。

这里只是为了研究，在生产环境中当然`不应该`直接修改框架的源代码目录，一般你也没这个权限。
应该做的是参考官方的文档 [Writing custom django-admin commands]，给单独的项目添加相应的命令。

[django.core.management]: https://docs.djangoproject.com/en/1.10/ref/django-admin/ 
[Writing custom django-admin commands]: https://docs.djangoproject.com/en/1.10/howto/custom-management-commands/